# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  shared: __package__.yml
  inboxes: inboxes.yml
  threads: threads.yml

types:
  AttachmentId:
    type: string
    docs: ID of attachment.

  Attachment:
    properties:
      attachment_id: AttachmentId
      filename:
        type: string
        docs: Filename of attachment.
      mime_type:
        type: string
        docs: MIME type of attachment.
      size:
        type: integer
        docs: Size of attachment in bytes.
      inline:
        type: boolean
        docs: Whether attachment is part of message body.

  MessageId:
    type: string
    docs: ID of message.

  MessageSentAt:
    type: datetime
    docs: Time at which message was sent.

  MessageFrom:
    type: string
    docs: Address of sender. In format `username@domain.com` or `Display Name <username@domain.com>`.

  MessageSubject:
    type: string
    docs: Subject of message.

  MessagePreview:
    type: string
    docs: Text preview of message.

  MessageTo:
    type: list<string>
    docs: Addresses of recipients. In format `username@domain.com` or `Display Name <username@domain.com>`.

  MessageCc:
    type: list<string>
    docs: Addresses of CC recipients. In format `username@domain.com` or `Display Name <username@domain.com>`.

  MessageBcc:
    type: list<string>
    docs: Addresses of BCC recipients. In format `username@domain.com` or `Display Name <username@domain.com>`.

  MessageAttachments:
    type: list<Attachment>
    docs: Attachments in message.

  MessageItem:
    properties:
      message_id: MessageId
      thread_id: threads.ThreadId
      sent_at: MessageSentAt
      from: MessageFrom
      subject: optional<MessageSubject>
      preview: optional<MessagePreview>
      to: MessageTo
      cc: optional<MessageCc>
      bcc: optional<MessageBcc>
      attachments: optional<MessageAttachments>

  MessageThreadId:
    type: string
    docs: Thread ID of message.

  MessageText:
    type: string
    docs: Plain text body of message.

  MessageHtml:
    type: string
    docs: HTML body of message.

  Message:
    properties:
      message_id: MessageId
      thread_id: MessageThreadId
      sent_at: MessageSentAt
      received_at:
        type: optional<datetime>
        docs: Time at which message was received.
      from: MessageFrom
      reply_to:
        type: optional<string>
        docs: Address to reply to. In format `username@domain.com` or `Display Name <username@domain.com>`.
      subject: optional<MessageSubject>
      preview: optional<MessagePreview>
      to: MessageTo
      cc: optional<MessageCc>
      bcc: optional<MessageBcc>
      text: optional<MessageText>
      html: optional<MessageHtml>
      attachments: optional<MessageAttachments>
      in_reply_to:
        type: optional<string>
        docs: ID of message being replied to.
      references:
        type: optional<list<string>>
        docs: IDs of previous messages in thread.
    examples:
      - name: CustomName
        value:
          message_id: "msg_123"
          thread_id: "thread_123"
          sent_at: "2024-01-15T09:30:00Z"
          received_at: "2024-01-15T09:30:00Z"
          from: "alice@example.com"
          reply_to: "alice.work@example.com"
          to: ["bob@example.com"]
          cc: ["charlie@example.com"]
          bcc: ["david@example.com"]
          subject: "Project Discussion"
          preview: "Let's review the timeline for the project."
          text: "Let's review the timeline for the project. How does tomorrow look?"
          html: "<p>Let's review the timeline for the project. How does tomorrow look?</p>"
          attachments:
            [
              {
                attachment_id: "att_123",
                filename: "proposal.pdf",
                mime_type: "application/pdf",
                size: 1024,
                inline: false,
              },
            ]
          in_reply_to: "msg_122"
          references: ["msg_121", "msg_122"]

  ListMessagesResponse:
    properties:
      messages:
        type: list<MessageItem>
        docs: Messages items. Ordered by `sent_at` descending.
      count: shared.Count
      limit: optional<shared.Limit>
      last_key: optional<shared.LastKey>
    examples:
      - name: CustomName
        value:
          messages:
            - message_id: "msg_123"
              thread_id: "thread_123"
              sent_at: "2024-01-15T09:30:00Z"
              from: "alice@example.com"
              to: ["bob@example.com"]
              subject: "Project Discussion"
              preview: "Let's review the timeline for the project."
              cc: ["charlie@example.com"]
              bcc: ["david@example.com"]
              attachments:
                [
                  {
                    attachment_id: "att_123",
                    filename: "proposal.pdf",
                    mime_type: "application/pdf",
                    size: 1024,
                    inline: false,
                  },
                ]
            - message_id: "msg_456"
              thread_id: "thread_123"
              sent_at: "2024-01-15T10:15:00Z"
              from: "bob@example.com"
              to: ["alice@example.com"]
              subject: "Re: Project Discussion"
              preview: "Sounds good, let's meet tomorrow."
          limit: 10
          count: 2
          last_key: "msg_456#2024-01-15T10:15:00Z"

  Addresses:
    discriminated: false
    union:
      - string
      - list<string>

  SendMessageTo:
    type: Addresses
    docs: Recipient address or addresses.

  SendMessageCc:
    type: optional<Addresses>
    docs: CC recipient address or addresses.

  SendMessageBcc:
    type: optional<Addresses>
    docs: BCC recipient address or addresses.

  SendMessageRequest:
    properties:
      to: SendMessageTo
      cc: SendMessageCc
      bcc: SendMessageBcc
      subject: optional<MessageSubject>
      text: optional<MessageText>
      html: optional<MessageHtml>

  SendMessageResponse:
    properties:
      message_id: MessageId

  ReplyToMessageRequest:
    properties:
      to: optional<SendMessageTo>
      cc: SendMessageCc
      bcc: SendMessageBcc
      text: optional<MessageText>
      html: optional<MessageHtml>

service:
  base-path: /inboxes/{inbox_id}
  path-parameters:
    inbox_id: inboxes.InboxId

  auth: true

  endpoints:
    list:
      method: GET
      path: /messages
      display-name: List Messages
      docs: List messages in inbox. If neither or both `received` and `sent` query parameters are set, all messages are returned.
      request:
        name: ListMessagesRequest
        query-parameters:
          received: optional<shared.Received>
          sent: optional<shared.Sent>
          limit: optional<shared.Limit>
          last_key: optional<shared.LastKey>
      response: ListMessagesResponse
      errors:
        - shared.NotFoundError
      examples:
        - path-parameters:
            inbox_id: yourinbox@agentmail.to
          query-parameters:
            limit: 10
          response:
            body: $ListMessagesResponse.CustomName
          code-samples:
            - sdk: python
              code: |
                from agentmail import AgentMail
                client = AgentMail(api_key="YOUR_API_KEY")
                messages = client.messages.list(
                    inbox_id="yourinbox@agentmail.to",
                    limit=10,
                    received=True  # Optional: filter for received messages
                )
            - sdk: typescript
              code: |
                import { AgentMail } from "agentmail";
                const client = new AgentMail({ apiKey: "YOUR_API_KEY" });
                const messages = await client.messages.list({ 
                  inboxId: "yourinbox@agentmail.to",
                  limit: 10,
                  received: true  // Optional: filter for received messages
                });

    get:
      method: GET
      path: /messages/{message_id}
      display-name: Get Message
      path-parameters:
        message_id: MessageId
      response: Message
      errors:
        - shared.NotFoundError
      examples:
        - path-parameters:
            inbox_id: yourinbox@agentmail.to
            message_id: "msg_123"
          response:
            body: $Message.CustomName
          code-samples:
            - sdk: python
              code: |
                from agentmail import AgentMail
                client = AgentMail(api_key="YOUR_API_KEY")
                message = client.messages.get(
                    inbox_id="yourinbox@agentmail.to",
                    message_id="msg_123"
                )
            - sdk: typescript
              code: |
                import { AgentMail } from "agentmail";
                const client = new AgentMail({ apiKey: "YOUR_API_KEY" });
                const message = await client.messages.get({
                  inboxId: "yourinbox@agentmail.to",
                  messageId: "msg_123"
                });

    getAttachment:
      method: GET
      path: /messages/{message_id}/attachments/{attachment_id}
      display-name: Get Attachment
      path-parameters:
        message_id: MessageId
        attachment_id: AttachmentId
      response: file
      errors:
        - shared.NotFoundError

    # delete:
    #   method: DELETE
    #   path: /messages/{message_id}
    #   display-name: Delete Message
    #   path-parameters:
    #     message_id: MessageId
    #   docs: Delete message and its attachments.
    #   errors:
    #     - shared.NotFoundError

    send:
      method: POST
      path: /messages
      display-name: Send Message
      request: SendMessageRequest
      response: SendMessageResponse
      errors:
        - shared.NotFoundError
        - shared.ValidationError
      examples:
        - path-parameters:
            inbox_id: yourinbox@agentmail.to
          request:
            to: ["bob@example.com"]
            cc: ["charlie@example.com"]
            bcc: ["david@example.com"]
            subject: "Project Discussion"
            text: "Let's review the timeline for the project."
            html: "<p>Let's review the timeline for the project.</p>"
          response:
            body:
              thread_id: "thread_123"
              message_id: "msg_123"
          code-samples:
            - sdk: python
              code: |
                from agentmail import AgentMail
                client = AgentMail(api_key="YOUR_API_KEY")
                response = client.messages.send(
                    inbox_id="yourinbox@agentmail.to",
                    to="bob@example.com",
                    cc="charlie@example.com",
                    bcc="david@example.com",
                    subject="Project Discussion",
                    text="Let's review the timeline for the project.",
                    html="<p>Let's review the timeline for the project.</p>"
                )
                print(f"Sent message: {response.message_id}")
            - sdk: typescript
              code: |
                import { AgentMail } from "agentmail";
                const client = new AgentMail({ apiKey: "YOUR_API_KEY" });
                const response = await client.messages.send({
                  inboxId: "yourinbox@agentmail.to",
                  to: "bob@example.com",
                  cc: "charlie@example.com",
                  bcc: "david@example.com",
                  subject: "Project Discussion",
                  text: "Let's review the timeline for the project.",
                  html: "<p>Let's review the timeline for the project.</p>"
                });
                console.log(`Sent message: ${response.messageId}`);

    reply:
      method: POST
      path: /messages/{message_id}
      display-name: Reply To Message
      path-parameters:
        message_id: MessageId
      request: ReplyToMessageRequest
      response: SendMessageResponse
      errors:
        - shared.NotFoundError
        - shared.ValidationError
      examples:
        - path-parameters:
            inbox_id: yourinbox@agentmail.to
            message_id: "msg_123"
          request:
            text: "Thanks for the update. Let's meet tomorrow at 2 PM."
            html: "<p>Thanks for the update. Let's meet tomorrow at 2 PM.</p>"
            cc: ["charlie@example.com"]
            bcc: ["david@example.com"]
          response:
            body:
              thread_id: "thread_123"
              message_id: "msg_456"
          code-samples:
            - sdk: python
              code: |
                from agentmail import AgentMail
                client = AgentMail(api_key="YOUR_API_KEY")
                response = client.messages.reply(
                    inbox_id="yourinbox@agentmail.to",
                    message_id="msg_123",
                    text="Thanks for the update. Let's meet tomorrow at 2 PM.",
                    html="<p>Thanks for the update. Let's meet tomorrow at 2 PM.</p>",
                    cc="charlie@example.com",
                    bcc="david@example.com"
                )
                print(f"Sent reply: {response.message_id}")
            - sdk: typescript
              code: |
                import { AgentMail } from "agentmail";
                const client = new AgentMail({ apiKey: "YOUR_API_KEY" });
                const response = await client.messages.reply({
                  inboxId: "yourinbox@agentmail.to",
                  messageId: "msg_123",
                  text: "Thanks for the update. Let's meet tomorrow at 2 PM.",
                  html: "<p>Thanks for the update. Let's meet tomorrow at 2 PM.</p>",
                  cc: "charlie@example.com",
                  bcc: "david@example.com"
                });
                console.log(`Sent reply: ${response.messageId}`);
