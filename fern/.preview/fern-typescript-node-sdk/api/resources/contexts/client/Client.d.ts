/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AgentMail from "../../../index";
export declare namespace Contexts {
    interface Options {
        environment?: core.Supplier<environments.AgentMailEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Contexts {
    protected readonly _options: Contexts.Options;
    constructor(_options?: Contexts.Options);
    /**
     * @param {AgentMail.ListContextsRequest} request
     * @param {Contexts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.contexts.list()
     */
    list(request?: AgentMail.ListContextsRequest, requestOptions?: Contexts.RequestOptions): Promise<AgentMail.ListContextsResponse>;
    /**
     * @param {AgentMail.ContextId} contextId
     * @param {Contexts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.contexts.get("context_id")
     */
    get(contextId: AgentMail.ContextId, requestOptions?: Contexts.RequestOptions): Promise<AgentMail.Context>;
    /**
     * @param {AgentMail.CreateContextRequest} request
     * @param {Contexts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.ValidationError}
     *
     * @example
     *     await client.contexts.create({
     *         type: "type",
     *         data: {
     *             "data": {
     *                 "key": "value"
     *             }
     *         },
     *         metadata: undefined,
     *         isEvent: true
     *     })
     */
    create(request: AgentMail.CreateContextRequest, requestOptions?: Contexts.RequestOptions): Promise<AgentMail.Context>;
    /**
     * @param {AgentMail.ContextId} contextId
     * @param {Contexts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.contexts.delete("context_id")
     */
    delete(contextId: AgentMail.ContextId, requestOptions?: Contexts.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
