/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AgentMail from "../../../index";
import * as stream from "stream";
export declare namespace Threads {
    interface Options {
        environment?: core.Supplier<environments.AgentMailEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Threads {
    protected readonly _options: Threads.Options;
    constructor(_options?: Threads.Options);
    /**
     * @param {AgentMail.ListThreadsRequest} request
     * @param {Threads.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.threads.list()
     */
    list(request?: AgentMail.ListThreadsRequest, requestOptions?: Threads.RequestOptions): Promise<AgentMail.ListThreadsResponse>;
    /**
     * @param {AgentMail.ThreadId} threadId
     * @param {Threads.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.threads.get("thread_id")
     */
    get(threadId: AgentMail.ThreadId, requestOptions?: Threads.RequestOptions): Promise<AgentMail.Thread>;
    /**
     * @throws {@link AgentMail.NotFoundError}
     */
    getAttachment(threadId: AgentMail.ThreadId, attachmentId: AgentMail.AttachmentId, requestOptions?: Threads.RequestOptions): Promise<stream.Readable>;
    protected _getAuthorizationHeader(): Promise<string>;
}
