/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AgentMail from "../../../index";
export declare namespace Webhooks {
    interface Options {
        environment?: core.Supplier<environments.AgentMailEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Webhooks {
    protected readonly _options: Webhooks.Options;
    constructor(_options?: Webhooks.Options);
    /**
     * @param {AgentMail.ListWebhooksRequest} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.webhooks.list()
     */
    list(request?: AgentMail.ListWebhooksRequest, requestOptions?: Webhooks.RequestOptions): Promise<AgentMail.ListWebhooksResponse>;
    /**
     * @param {AgentMail.WebhookId} webhookId
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.webhooks.get("webhook_id")
     */
    get(webhookId: AgentMail.WebhookId, requestOptions?: Webhooks.RequestOptions): Promise<AgentMail.Webhook>;
    /**
     * @param {AgentMail.CreateWebhookRequest} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.ValidationError}
     *
     * @example
     *     await client.webhooks.create({
     *         url: "url",
     *         eventTypes: ["message.received", "message.received"],
     *         inboxIds: undefined,
     *         clientId: undefined
     *     })
     */
    create(request: AgentMail.CreateWebhookRequest, requestOptions?: Webhooks.RequestOptions): Promise<AgentMail.Webhook>;
    /**
     * @param {AgentMail.WebhookId} webhookId
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.webhooks.delete("webhook_id")
     */
    delete(webhookId: AgentMail.WebhookId, requestOptions?: Webhooks.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
