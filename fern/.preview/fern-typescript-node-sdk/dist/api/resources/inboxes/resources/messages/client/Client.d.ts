/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as AgentMail from "../../../../../index";
import * as stream from "stream";
export declare namespace Messages {
    interface Options {
        environment?: core.Supplier<environments.AgentMailEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Messages {
    protected readonly _options: Messages.Options;
    constructor(_options?: Messages.Options);
    /**
     * @param {AgentMail.inboxes.InboxId} inboxId
     * @param {AgentMail.inboxes.ListMessagesRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.inboxes.messages.list("inbox_id")
     */
    list(inboxId: AgentMail.inboxes.InboxId, request?: AgentMail.inboxes.ListMessagesRequest, requestOptions?: Messages.RequestOptions): Promise<AgentMail.ListMessagesResponse>;
    /**
     * @param {AgentMail.inboxes.InboxId} inboxId
     * @param {AgentMail.MessageId} messageId
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.inboxes.messages.get("inbox_id", "message_id")
     */
    get(inboxId: AgentMail.inboxes.InboxId, messageId: AgentMail.MessageId, requestOptions?: Messages.RequestOptions): Promise<AgentMail.Message>;
    /**
     * @throws {@link AgentMail.NotFoundError}
     */
    getAttachment(inboxId: AgentMail.inboxes.InboxId, messageId: AgentMail.MessageId, attachmentId: AgentMail.AttachmentId, requestOptions?: Messages.RequestOptions): Promise<stream.Readable>;
    /**
     * @param {AgentMail.inboxes.InboxId} inboxId
     * @param {AgentMail.SendMessageRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.ValidationError}
     * @throws {@link AgentMail.NotFoundError}
     * @throws {@link AgentMail.MessageRejectedError}
     *
     * @example
     *     await client.inboxes.messages.send("inbox_id", {
     *         labels: undefined,
     *         replyTo: undefined,
     *         to: undefined,
     *         cc: undefined,
     *         bcc: undefined,
     *         subject: undefined,
     *         text: undefined,
     *         html: undefined,
     *         attachments: undefined
     *     })
     */
    send(inboxId: AgentMail.inboxes.InboxId, request: AgentMail.SendMessageRequest, requestOptions?: Messages.RequestOptions): Promise<AgentMail.SendMessageResponse>;
    /**
     * @param {AgentMail.inboxes.InboxId} inboxId
     * @param {AgentMail.MessageId} messageId
     * @param {AgentMail.ReplyToMessageRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.ValidationError}
     * @throws {@link AgentMail.NotFoundError}
     * @throws {@link AgentMail.MessageRejectedError}
     *
     * @example
     *     await client.inboxes.messages.reply("inbox_id", "message_id", {
     *         labels: undefined,
     *         replyTo: undefined,
     *         to: undefined,
     *         cc: undefined,
     *         bcc: undefined,
     *         text: undefined,
     *         html: undefined,
     *         attachments: undefined
     *     })
     */
    reply(inboxId: AgentMail.inboxes.InboxId, messageId: AgentMail.MessageId, request: AgentMail.ReplyToMessageRequest, requestOptions?: Messages.RequestOptions): Promise<AgentMail.SendMessageResponse>;
    /**
     * @param {AgentMail.inboxes.InboxId} inboxId
     * @param {AgentMail.MessageId} messageId
     * @param {AgentMail.UpdateMessageRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.ValidationError}
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.inboxes.messages.update("inbox_id", "message_id", {
     *         addLabels: undefined,
     *         removeLabels: undefined
     *     })
     */
    update(inboxId: AgentMail.inboxes.InboxId, messageId: AgentMail.MessageId, request: AgentMail.UpdateMessageRequest, requestOptions?: Messages.RequestOptions): Promise<AgentMail.Message>;
    protected _getAuthorizationHeader(): Promise<string>;
}
