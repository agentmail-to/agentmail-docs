/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AgentMail from "../../../index";
import { Threads } from "../resources/threads/client/Client";
import { Messages } from "../resources/messages/client/Client";
import { Drafts } from "../resources/drafts/client/Client";
export declare namespace Inboxes {
    interface Options {
        environment?: core.Supplier<environments.AgentMailEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Inboxes {
    protected readonly _options: Inboxes.Options;
    protected _threads: Threads | undefined;
    protected _messages: Messages | undefined;
    protected _drafts: Drafts | undefined;
    constructor(_options?: Inboxes.Options);
    get threads(): Threads;
    get messages(): Messages;
    get drafts(): Drafts;
    /**
     * @param {AgentMail.inboxes.ListInboxesRequest} request
     * @param {Inboxes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inboxes.list()
     */
    list(request?: AgentMail.inboxes.ListInboxesRequest, requestOptions?: Inboxes.RequestOptions): Promise<AgentMail.inboxes.ListInboxesResponse>;
    /**
     * @param {AgentMail.inboxes.InboxId} inboxId
     * @param {Inboxes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.NotFoundError}
     *
     * @example
     *     await client.inboxes.get("inbox_id")
     */
    get(inboxId: AgentMail.inboxes.InboxId, requestOptions?: Inboxes.RequestOptions): Promise<AgentMail.inboxes.Inbox>;
    /**
     * @param {AgentMail.inboxes.CreateInboxRequest} request
     * @param {Inboxes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMail.ValidationError}
     *
     * @example
     *     await client.inboxes.create({
     *         username: undefined,
     *         domain: undefined,
     *         displayName: undefined,
     *         clientId: undefined
     *     })
     */
    create(request: AgentMail.inboxes.CreateInboxRequest, requestOptions?: Inboxes.RequestOptions): Promise<AgentMail.inboxes.Inbox>;
    protected _getAuthorizationHeader(): Promise<string>;
}
