/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AgentMailApi from "../../../index";
import * as stream from "stream";
export declare namespace Messages {
    interface Options {
        environment: core.Supplier<environments.AgentMailApiEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Messages {
    protected readonly _options: Messages.Options;
    constructor(_options: Messages.Options);
    /**
     * @param {AgentMailApi.InboxId} inboxId
     * @param {AgentMailApi.ListMessagesRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMailApi.InboxNotFoundError}
     *
     * @example
     *     await client.messages.listMessages("inbox_id")
     */
    listMessages(inboxId: AgentMailApi.InboxId, request?: AgentMailApi.ListMessagesRequest, requestOptions?: Messages.RequestOptions): Promise<AgentMailApi.ListMessagesResponse>;
    /**
     * @param {AgentMailApi.InboxId} inboxId
     * @param {AgentMailApi.MessageId} messageId
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMailApi.InboxNotFoundError}
     * @throws {@link AgentMailApi.MessageNotFoundError}
     *
     * @example
     *     await client.messages.getMessage("inbox_id", "message_id")
     */
    getMessage(inboxId: AgentMailApi.InboxId, messageId: AgentMailApi.MessageId, requestOptions?: Messages.RequestOptions): Promise<AgentMailApi.Message>;
    /**
     * @throws {@link AgentMailApi.AttachmentNotFoundError}
     */
    getAttachment(inboxId: AgentMailApi.InboxId, messageId: AgentMailApi.MessageId, attachmentId: AgentMailApi.AttachmentId, requestOptions?: Messages.RequestOptions): Promise<stream.Readable>;
    /**
     * Delete message and its attachments.
     *
     * @param {AgentMailApi.InboxId} inboxId
     * @param {AgentMailApi.MessageId} messageId
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMailApi.InboxNotFoundError}
     * @throws {@link AgentMailApi.MessageNotFoundError}
     *
     * @example
     *     await client.messages.deleteMessage("inbox_id", "message_id")
     */
    deleteMessage(inboxId: AgentMailApi.InboxId, messageId: AgentMailApi.MessageId, requestOptions?: Messages.RequestOptions): Promise<void>;
    /**
     * @param {AgentMailApi.InboxId} inboxId
     * @param {AgentMailApi.SendMessageRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMailApi.InboxNotFoundError}
     *
     * @example
     *     await client.messages.sendMessage("inbox_id", {
     *         to: "to",
     *         cc: undefined,
     *         bcc: undefined,
     *         subject: undefined,
     *         text: undefined,
     *         html: undefined
     *     })
     */
    sendMessage(inboxId: AgentMailApi.InboxId, request: AgentMailApi.SendMessageRequest, requestOptions?: Messages.RequestOptions): Promise<AgentMailApi.SendMessageResponse>;
    /**
     * @param {AgentMailApi.InboxId} inboxId
     * @param {AgentMailApi.MessageId} messageId
     * @param {AgentMailApi.ReplyToMessageRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMailApi.InboxNotFoundError}
     * @throws {@link AgentMailApi.MessageNotFoundError}
     *
     * @example
     *     await client.messages.replyToMessage("inbox_id", "message_id", {
     *         to: undefined,
     *         cc: undefined,
     *         bcc: undefined,
     *         text: undefined,
     *         html: undefined
     *     })
     */
    replyToMessage(inboxId: AgentMailApi.InboxId, messageId: AgentMailApi.MessageId, request: AgentMailApi.ReplyToMessageRequest, requestOptions?: Messages.RequestOptions): Promise<AgentMailApi.SendMessageResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
