/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AgentMailApi from "../../../index";
export declare namespace Inboxes {
    interface Options {
        environment: core.Supplier<environments.AgentMailApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Inboxes {
    protected readonly _options: Inboxes.Options;
    constructor(_options: Inboxes.Options);
    /**
     * @param {AgentMailApi.ListInboxesRequest} request
     * @param {Inboxes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inboxes.listInboxes()
     */
    listInboxes(request?: AgentMailApi.ListInboxesRequest, requestOptions?: Inboxes.RequestOptions): Promise<AgentMailApi.ListInboxesResponse>;
    /**
     * @param {AgentMailApi.InboxId} inboxId
     * @param {Inboxes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMailApi.NotFoundError}
     *
     * @example
     *     await client.inboxes.getInbox("inbox_id")
     */
    getInbox(inboxId: AgentMailApi.InboxId, requestOptions?: Inboxes.RequestOptions): Promise<AgentMailApi.Inbox>;
    /**
     * @param {AgentMailApi.CreateInboxRequest} request
     * @param {Inboxes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMailApi.ValidationError}
     *
     * @example
     *     await client.inboxes.createInbox({
     *         username: "yourinbox",
     *         displayName: "Your Inbox"
     *     })
     *
     * @example
     *     await client.inboxes.createInbox({
     *         domain: "yourdomain.com"
     *     })
     */
    createInbox(request: AgentMailApi.CreateInboxRequest, requestOptions?: Inboxes.RequestOptions): Promise<AgentMailApi.Inbox>;
    /**
     * Delete inbox and all of its threads, messages, and attachments.
     *
     * @param {AgentMailApi.InboxId} inboxId
     * @param {Inboxes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMailApi.NotFoundError}
     *
     * @example
     *     await client.inboxes.deleteInbox("yourinbox@agentmail.to")
     */
    deleteInbox(inboxId: AgentMailApi.InboxId, requestOptions?: Inboxes.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
