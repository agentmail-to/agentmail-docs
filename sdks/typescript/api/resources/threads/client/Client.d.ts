/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as AgentMailApi from "../../../index";
export declare namespace Threads {
    interface Options {
        environment: core.Supplier<environments.AgentMailApiEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Threads {
    protected readonly _options: Threads.Options;
    constructor(_options: Threads.Options);
    /**
     * @param {AgentMailApi.InboxId} inboxId
     * @param {AgentMailApi.ListThreadsRequest} request
     * @param {Threads.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMailApi.NotFoundError}
     *
     * @example
     *     await client.threads.listThreads("inbox_id")
     */
    listThreads(inboxId: AgentMailApi.InboxId, request?: AgentMailApi.ListThreadsRequest, requestOptions?: Threads.RequestOptions): Promise<AgentMailApi.ListThreadsResponse>;
    /**
     * @param {AgentMailApi.InboxId} inboxId
     * @param {AgentMailApi.ThreadId} threadId
     * @param {Threads.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMailApi.NotFoundError}
     *
     * @example
     *     await client.threads.getThread("inbox_id", "thread_id")
     */
    getThread(inboxId: AgentMailApi.InboxId, threadId: AgentMailApi.ThreadId, requestOptions?: Threads.RequestOptions): Promise<AgentMailApi.Thread>;
    /**
     * Delete thread and all of its messages and attachments.
     *
     * @param {AgentMailApi.InboxId} inboxId
     * @param {AgentMailApi.ThreadId} threadId
     * @param {Threads.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AgentMailApi.NotFoundError}
     *
     * @example
     *     await client.threads.deleteThread("inbox_id", "thread_id")
     */
    deleteThread(inboxId: AgentMailApi.InboxId, threadId: AgentMailApi.ThreadId, requestOptions?: Threads.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
